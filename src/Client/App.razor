@using System.Reflection
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Services

@inject LazyAssemblyLoader assemblyLoader
@inject IJSRuntime jsRuntime

<Router AppAssembly="@typeof(Program).Assembly"
        AdditionalAssemblies="@lazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
    <Navigating>
        <div style="padding:20px;background-color:blue;color:white">
            <p>Loading the requested page&hellip;</p>
        </div>
    </Navigating>
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private List<Assembly> lazyLoadedAssemblies = new List<Assembly>();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            if (args.Path.EndsWith("one"))
            {
                var assemblies = await assemblyLoader.LoadAssembliesAsync(new List<string>() { "Newtonsoft.Json.dll" });
                lazyLoadedAssemblies.AddRange(assemblies);
                var message = string.Format("expected: Newtonsoft.Json | received: {0}", string.Join(";", assemblies.Select(a => a.GetName().Name)));
                await jsRuntime.InvokeVoidAsync("alert", message);
            }
            else if (args.Path.EndsWith("two"))
            {
                var assemblies = await assemblyLoader.LoadAssembliesAsync(new List<string>() { "LazyAssemblyLoaderBugReport.MyLazy.dll" });
                lazyLoadedAssemblies.AddRange(assemblies);
                var message = string.Format("expected: LazyAssemblyLoaderBugReport.MyLazy | received: {0}", string.Join(";", assemblies.Select(a => a.GetName().Name)));
                await jsRuntime.InvokeVoidAsync("alert", message);
            }
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", ex.Message);
        }
    }
}